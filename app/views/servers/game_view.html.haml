%html{ lang: "en" }
  %head
    %title Shards of the Grid
    %meta{ charset: "UTF-8" }
    %meta{ name: "viewport", content: "width=device-width, initial-scale=1.0" }
    = csrf_meta_tags
    = action_cable_meta_tag
    = stylesheet_link_tag 'game_view', media: 'all'

:javascript
    document.addEventListener('turbo:load', () => {
      const gridCells = document.querySelectorAll('.grid-cell');
      const modal = document.getElementById('modal');
      const modalImage = document.getElementById('modal-image');
      const modalDescription = document.querySelector('.modal-description');
      const movePlayerButton = document.getElementById('move-player-btn');
      const pingButton = document.getElementById('ping-players-btn'); // Ping button reference
      const dropdownMenu = document.querySelector('.dropdown-menu');
      const characterIcon = document.getElementById('character-icon');

      let isCurrentPlayer = false;
      let goldAmount = 0; // Track the gold amount

      // Function to update the displayed gold amount
      function updateGold(newGold) {
        document.getElementById('gold-amount').textContent = newGold;
      }

      gridCells.forEach((cell) => {
        cell.addEventListener('click', async () => {
          gridCells.forEach((c) => c.classList.remove('selected'));
          cell.classList.add('selected');

          const row = cell.dataset.row;
          const column = cell.dataset.column;
          const imageUrl = cell.dataset.imageUrl;
          const prompt = cell.dataset.prompt;
          isCurrentPlayer = cell.dataset.currentPlayer === 'true';

          modalImage.src = imageUrl && imageUrl !== '' ? imageUrl : '/planets/11test.png';

          if (isCurrentPlayer) {
            try {
              const serverId = document.getElementById('game-container').dataset.serverId;
              const playerId = document.getElementById('game-container').dataset.playerId;

              const response = await fetch(`/servers/${serverId}/players/${playerId}/generate_story`);
              const data = await response.json();

              if (data.success) {
                modalDescription.textContent = `${data.story}\n\nYou found ${data.gold} gold!`;
                goldAmount = data.gold;
              } else {
                modalDescription.textContent = 'Failed to generate story.';
              }
            } catch (error) {
              console.error('Error fetching story:', error);
              modalDescription.textContent = 'Error fetching story.';
            }

            movePlayerButton.textContent = 'Collect Gold';
            movePlayerButton.onclick = async () => {
              const serverId = document.getElementById('game-container').dataset.serverId;
              const playerId = document.getElementById('game-container').dataset.playerId;

              try {
                const response = await fetch(`/servers/${serverId}/players/${playerId}/collect_gold`, {
                  method: 'PATCH',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                  },
                  body: JSON.stringify({ gold: goldAmount }),
                });

                const data = await response.json();
                if (data.success) {
                  alert(`You collected ${goldAmount} gold!`);
                  updateGold(data.new_gold)
                  modal.style.display = 'none';
                } else {
                  alert(data.error || "An error occurred.");
                }
              } catch (error) {
                console.error("Error:", error);
              }
            };
          } else {
            modalDescription.textContent = prompt || `Move the player to cell at row ${row}, column ${column}`;
            movePlayerButton.textContent = 'Move Player';
            movePlayerButton.onclick = async () => {
              const serverId = document.getElementById('game-container').dataset.serverId;
              const playerId = document.getElementById('game-container').dataset.playerId;

              try {
                const response = await fetch(`/servers/${serverId}/players/${playerId}/update_position`, {
                  method: 'PATCH',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                  },
                  body: JSON.stringify({ player: { row: row, column: column } }),
                });

                const data = await response.json();
                if (data.success) {
                  location.reload();
                } else {
                  alert(data.error || "An error occurred.");
                }
              } catch (error) {
                console.error("Error:", error);
              }
            };
          }

          modal.style.display = 'block';
        });
      });

      // Ping players functionality
      pingButton.addEventListener('click', async () => {
        const serverId = document.getElementById('game-container').dataset.serverId;

        const selectedCell = document.querySelector('.grid-cell.selected');
        if (!selectedCell) {
          alert('Please select a grid cell first.');
          return;
        }

        const targetRow = selectedCell.dataset.row;
        const targetColumn = selectedCell.dataset.column;

        // Optional: Show loading state
        pingButton.disabled = true;
        pingButton.textContent = 'Pinging...';

        try {
          const response = await fetch(`/servers/${serverId}/ping_players`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
            },
            body: JSON.stringify({ row: targetRow, column: targetColumn }), // Ensure no 'player' nesting
          });

          const data = await response.json();

          if (data.success) {
            const { target_tile, players_on_tile, current_player } = data.data;
            let message = `Players on tile (${target_tile.row}, ${target_tile.column}):\n`;
            if (players_on_tile.length === 0) {
              message += 'No other players on this tile.';
            } else {
              players_on_tile.forEach(p => {
                message += `- ${p.email}\n`;
              });
            }

            // Optionally, include current player's info if present
            if (current_player) {
              message += `\nCurrent Player: ${current_player.email}`;
            }

            alert(message);
          } else {
            alert(data.message || 'No players to ping.');
          }
        } catch (error) {
          console.error('Error pinging players:', error);
          alert('An error occurred while pinging players. Please try again.');
        } finally {
          // Reset ping button state
          pingButton.disabled = false;
          pingButton.textContent = 'Ping Players';
        }
      });

      document.querySelector('.close-button').addEventListener('click', () => {
        modal.style.display = 'none';
      });

      // Dropdown menu functionality
      characterIcon.addEventListener('click', (event) => {
        event.stopPropagation();
        dropdownMenu.style.display = dropdownMenu.style.display === 'flex' ? 'none' : 'flex';
      });

      document.addEventListener('click', (event) => {
        if (!dropdownMenu.contains(event.target) && event.target !== characterIcon) {
          dropdownMenu.style.display = 'none';
        }
      });
    });

  %body
    %header.title Shards of the Grid
    #game-container{ data: { server_id: @server.id, player_id: @player.id } }
      #game-logo
        = image_tag "GameLogo.png", alt: "Game Logo", height: "50", width: "50"

      .game-grid
        - @server.grid_tiles.order(:row, :column).each_slice(6) do |row_tiles|
          %div.row
            - row_tiles.each do |tile|
              %div.grid-cell{
                class: tile.row == @player.row && tile.column == @player.column ? 'player-current' : '',
                data: {
                  row: tile.row,
                  column: tile.column,
                  image_url: tile.image_url || '/planets/11test.png',
                  prompt: tile.prompt,
                  current_player: (tile.row == @player.row && tile.column == @player.column).to_s
                }
              }

                = image_tag(tile.image_url.presence || '/planets/11test.png', alt: "Grid Image", style: "width: 100%; height: 100%; object-fit: cover; border-radius: 12px;")
                %p{ style: "position: relative; z-index: 1; color: white; text-align: center; margin: 0;" }
                  = "Cell #{tile.row}, #{tile.column}"





      .chat-container
        #character-icon-container{ style: "position: relative;" }
          #character-icon{ tabindex: "0" }
            = image_tag "baseAvatar.png", alt: "Character Icon", height: "50", width: "50"
          .dropdown-menu
            = link_to 'User Profile', user_profile_path, class: 'dropdown-btn'
            = link_to 'Buy Shards', shard_purchase_path, class: 'dropdown-btn'
            = link_to 'Settings', welcome_settings_path, class: 'dropdown-btn'
            = link_to 'Store', store_menu_storefront_index_path, class: 'dropdown-btn'
            = link_to 'Server', servers_path, class: 'dropdown-btn'
            = button_to 'Logout', logout_path, method: :delete, class: 'dropdown-btn', form: { class: 'inline-form' }

        #single_room
          %h4.text-center= @server.server_num
          = turbo_stream_from @server
          #messages
            - if @messages.present?
              - @messages.each do |message|
                %div.message
                  %p
                    %strong= message.user.email
                    = message.body
          = render partial: 'layouts/new_message_form'

%div#modal.modal
  .modal-content
    %button.close-button &times;
    .modal-image
      %img#modal-image{ src: '', alt: 'Grid Cell Image', class: 'modal-img' }
    .modal-description Move the player to the selected cell.
    .story-container
      %p#story-text
    .modal-buttons
      %button#move-player-btn.move-player-btn Move Player
      %button Collect Resource
      %button#ping-players-btn Ping Players
      %button Button 4

